%h1.title Edit Hub Information for #{@hub.location}

%p
  On this page, you can edit all of the information that appears about your hub on the
  %a{href: 'https://sunrisemovement.org/hubs', target: '_blank'} Sunrise movement hub map!
%br

%form{action: '/hub', method: 'POST'}
  %fieldset
    .columns
      .column
        %h2.subtitle Basic Info
        .field
          %label.label Hub Name
          .control
            %input.input{name: 'Name', value: @hub['Name']}

        .field
          %label.label Is your hub active?
          .control
            .select
              %select{name: "Activity?"}
                - [["Active", "Yes, we're active!"],["Semi-Active","We're semi-active."],["Inactive","We're inactive, hide us for now :("]].each do |value,label|
                  %option{value: value, selected: @hub.fields["Activity?"]==value}= label
            %p.help If you mark your hub as inactive, we won't show it on the map.

        .field
          %label.label What contact info should we show on the map?
          .control
            .select
              %select{name: "Contact Type", id: 'contact-type'}
                %option{value: 'Hub Email'} Hub email
                %option{value: 'Coordinator Emails'} Coordinator emails
                %option{value: 'Hub Email + Coordinator Emails'} Both hub and coordinator emails
                %option{value: 'Custom Text'} Custom text (enter below)
            %p.help Pick which type of contact information we show on the card.
        .field{id: 'cust-contact-text'}
          %label.label Custom contact text
          .control
            %input.input{name: 'Custom Map Contact Text', value: @hub['Custom Map Contact Text'], id: 'cust-contact-input'}
        .field
          %label.label Hub Email
          .control
            %input.input{disabled: 'disabled', value: @hub['Email']}
            %p.help This is the main contact email we have on file for your hub. If you need to change this email, please contact us directly for now!
        .field
          %label.label Custom welcome email
          .control
            %input.input{name: 'Custom Map Email', value: @hub['Custom Map Email']}
            %p.help By default we display hubs' main contact emails, but if you have a welcome email for newcomers, we can display that instead.

      .column
        %h2.subtitle Map Links
        .field
          %label.label Facebook Link/Handle
          .control
            %input.input{name: 'Facebook Handle', value: @hub['Facebook Handle']}

        .field
          %label.label Twitter Link/Handle
          .control
            %input.input{name: 'Twitter Handle', value: @hub['Twitter Handle']}

        .field
          %label.label Instagram Link/Handle
          .control
            %input.input{name: 'Instagram Handle', value: @hub['Instagram Handle']}
            %p.help For these social media fields, you can either provide a full link or just the handle (with or without the @ sign).

        .field
          %label.label Website
          .control
            %input.input{name: 'Website', value: @hub['Website']}
            %p.help
              Here you can link to a custom hub website or sign-up form. Please include http:// or https:// at the beginning ._.
        .field
          %label.label Website Link Text
          .control
            %input.input{name: 'Custom Website Link Text', value: @hub['Custom Website Link Text'], placeholder: 'Hub Website'}
            %p.help If you enter something here, it will show up instead of "Hub Website" as the link text on the map. For example, if your link is a sign-up form, you might enter "Sign Up"!
      .column
        %h2.subtitle Pin Location
        - ['Latitude', 'Longitude'].each do |field|
          .field
            %label.label= field
            .control
              %input.input{name: field, placeholder: field, id: field, value: @hub.fields[field]}
            - if field == 'Longitude'
              %p.help
                Google has
                %a{href: 'https://support.google.com/maps/answer/18539', target: '_blank'}
                  helpful instructions
                for finding these!
        .field
          %label.label
            Where that is
          .control
            %iframe#map-iframe{src: "https://maps.google.com/maps/embed/v1/place?q=#{@hub.fields['Latitude']},#{@hub.fields['Longitude']}&key=#{ENV['GOOGLE_MAPS_API_KEY']}", style: "width: 100%; min-height: 266px", :"data-key" => ENV['GOOGLE_MAPS_API_KEY'] }

  %br
  %input.button.is-warning{type: 'submit', value: 'Update Hub Information'}

  %hr

%form{action: '/leaders', method: 'POST'}
  %fieldset
    .columns
      .column
        %h2.title Manage Leaders
        %p
          In this section, you can manage information for everyone who has filled out the
          %a{href: "#{ENV['HUB_LEADER_FORM']}", target: '_blank'} hub leader form
          for #{@hub['Name']}&mdash;in particular, you can confirm leaders' activity in the hub,
          ensure names and emails are correct,
          and decide who should be shown on the map (if you are not just displaying the hub contact email). If you need to add someone new, just have them fill out the hub leader form!
        %br
        %p
          For our initial beta-test of this system, we are not yet supporting
          fully featured editing (e.g. of roles and other
          information we collect in the leader form). However, we are definitely looking for feedback on what kinds of information it would be most useful to be able to view and change here! For now, if you need to make those kinds of edits, you can email
          us at
          %a{href: "mailto:#{ENV['GMAIL_USER']}"}= ENV['GMAIL_USER']
          or fill out the
          %a{href: "https://docs.google.com/forms/d/13gqamQs_jPZI6s5dwXUG92R2it13hhHspJsd5ytPAZo/viewform?edit_requested=true", target: "_blank"} change request form
          like before.
        %br
        %table.table.is-bordered.is-striped.is-fullwidth.is-responsive
          %thead
            %tr
              %th First Name
              %th Last Name
              %th Email
              %th Roles
              %th Hub Activity
              %th Map Visibility
          %tbody
            - @hub.leaders.each do |lead|
              %tr
                %td
                  %input.input.is-small{name: "leaders[#{lead.id}][First Name]", value: lead['First Name']}
                %td
                  %input.input.is-small{name: "leaders[#{lead.id}][Last Name]", value: lead['Last Name']}
                %td
                  %input.input.is-small{name: "leaders[#{lead.id}][Email]", value: lead['Email'], type: 'email'}
                %td
                  - (lead['Role'] || []).each do |role|
                    %span.tag= role.gsub(' - Self Describe In Next Field', '')
                %td
                  %label.checkbox
                    %input{type: 'checkbox', name: "leaders[#{lead.id}][Activity?]", checked: lead['Activity?']}
                    Active member
                %td
                  %label.checkbox
                    %input{type: 'checkbox', name: "leaders[#{lead.id}][Map?]", checked: lead['Map?']}
                    %abbr{title: "Checking this will allow a hub leader's name and email to be displayed on the map, but only if you've selected 'Coordinator emails' above!"} Allow on map

  %br
  %input.button.is-warning{type: 'submit', value: 'Update Leader Information'}

:css
  .hidden { display: none; }

:javascript
  const latInput = document.getElementById('Latitude');
  const lngInput = document.getElementById('Longitude');
  const mapIframe = document.getElementById('map-iframe');
  const reloadBtn = document.getElementById('reload-map');
  const custInput = document.getElementById('cust-contact-input');
  const contType = document.getElementById('contact-type');
  const custText = document.getElementById('cust-contact-text');

  const key = mapIframe.attributes['data-key'].value;

  const resetMap = () => {
    mapIframe.setAttribute("src", `https://maps.google.com/maps/embed/v1/place?q=${latInput.value},${lngInput.value}&key=${key}`);
  };

  latInput.oninput = resetMap;
  lngInput.oninput = resetMap;

  const toggleCustText = () => {
    if (contType.value == 'Custom Text') {
      custText.style.display = 'block';
      custInput.removeAttribute("disabled");
    } else {
      custText.style.display = 'none';
      custInput.setAttribute("disabled", "disabled");
    }
  };

  contType.onchange = toggleCustText;
  toggleCustText();
