%article.message.is-warning
  %p.message-body
    On this page, you can edit all of the information that appears about your hub on the
    %a{href: 'https://sunrisemovement.org/hubs', target: '_blank'} Sunrise movement hub map!

%h1.title Edit Hub Information for #{@hub.fields['City']}, #{@hub.fields['State']}

%form{action: '/hub', method: 'POST'}
  %fieldset
    .columns
      .column
        %h2.subtitle Basic Info
        .field
          %label.label Hub Name
          .control
            %input.input{name: 'Name', value: @hub['Name']}

        .field
          %label.label Is your hub active?
          .control
            .select
              %select{name: "Activity?"}
                - [["Active", "Yes, we're going strong!"],["Semi-Active","Yes, but we could use some help..."],["Inactive","Nope, not right now. Hide us from the map :("]].each do |value,label|
                  %option{value: value, selected: @hub.fields["Activity?"]==value}= label

        .field
          %label.label What contact info should we show on the map?
          .control
            .select
              %select{name: "Display Email Source", id: 'display-email-src'}
                %option{value: 'Hub'} Hub email!
                %option{value: 'Coordinators'} Coordinator names and emails!
                %option{value: 'Hub and Coordinators'} Both hub email *and* coordinators!
                %option{value: 'Custom Text'} Custom text (enter below).
                %option{value: 'None'} Nothing; don't show any contact info.
        .field{id: 'cust-contact-text'}
          %label.label Custom contact info text
          .control
            %input.input{name: 'Custom Map Contact Text', value: @hub['Custom Map Contact Text']}
        .field
          %label.label Custom email 
          .control
            %input.input{name: 'Custom Map Email', value: @hub['Custom Map Email'], placeholder: @hub['Email']}
            %p.help By default, we normally display hubs' main contact emails, but if you have a special welcome email for newcomers, we can display that instead.

      .column
        %h2.subtitle Map Links
        .field

        - ['Facebook Handle', 'Twitter Handle', 'Instagram Handle', 'Website'].each do |field|
          .field
            %label.label= field
            .control
              %input.input{name: field, value: @hub[field]}
        .field
          %label.label Website Link Text
          .control
            %input.input{name: 'Custom Website Link Text', value: @hub['Custom Website Link Text'], placeholder: 'Hub Website'}
            %p.help If you enter something here, it will show up instead of "Hub Website" as the link text on the map.
      .column
        %h2.subtitle Pin Location
        - ['Latitude', 'Longitude'].each do |field|
          .field
            %label.label= field
            .control
              %input.input{name: field, placeholder: field, id: field, value: @hub.fields[field]}
            - if field == 'Longitude'
              %p.help
                Google has
                %a{href: 'https://support.google.com/maps/answer/18539', target: '_blank'}
                  helpful instructions
                for finding these!
        .field
          %label.label
            Where that is
          .control
            %iframe#map-iframe{src: "https://maps.google.com/maps/embed/v1/place?q=#{@hub.fields['Latitude']},#{@hub.fields['Longitude']}&key=#{ENV['GOOGLE_MAPS_API_KEY']}", style: "width: 100%; min-height: 200px", :"data-key" => ENV['GOOGLE_MAPS_API_KEY'] }

  %br
  %input.button.is-warning{type: 'submit', value: 'Update Hub Information'}

  %hr

%form{action: '/leaders', method: 'POST'}
  %fieldset
    .columns
      .column
        %h2.subtitle Manage Leaders
        %p
          In this section, you can manage information for everyone who has filled out the 
          %a{href: "#{ENV['HUB_LEADER_FORM']}", target: '_blank'} hub leader form
          for #{@hub['Name']}&mdash;in particular, you can confirm leaders' membership and activity in the hub
          and decide who should be shown on the map (if you are not just displaying the hub contact email).
        %br
        %p
          For our initial beta-test of this system, we are not yet supporting fully featured editing (e.g. of names, pronouns, and contact information). If you need to make edits, you can either contact us in #hubtalk or you can mark the leader as "entered in error" and have them fill out a second copy of the leader form.
        %br
        %table.table.is-striped.is-fullwidth.is-responsive
          %thead
            %tr
              %th Leader Name
              %th Email
              %th Activity Status
              %th Map Visibility
          %tbody
            - @hub.leaders.each do |lead|
              %tr
                %td= lead['Name']
                %td= lead['Email']
                %td
                  .select
                    %select{name: "leaders[#{lead.id}][Membership Status]"}
                      %option{value: 'Active'} Active
                      %option{value: 'Inactive'} Inactive
                      %option{value: 'Entered in error'} Entered in error
                      %option{value: 'Not part of hub'} Not part of hub
                %td
                  %label.checkbox
                    %input{type: 'checkbox', name: "leaders[#{lead.id}][Map?]", checked: lead['Map?']}
                    Show on map

  %br
  %input.button.is-warning{type: 'submit', value: 'Update Leader Information'}

:css
  .hidden { display: none; }

:javascript
  const latInput = document.getElementById('Latitude');
  const lngInput = document.getElementById('Longitude');
  const mapIframe = document.getElementById('map-iframe');
  const reloadBtn = document.getElementById('reload-map');
  const displaySrc = document.getElementById('display-email-src');
  const custText = document.getElementById('cust-contact-text');

  const key = mapIframe.attributes['data-key'].value;

  const resetMap = () => {
    mapIframe.setAttribute("src", `https://maps.google.com/maps/embed/v1/place?q=${latInput.value},${lngInput.value}&key=${key}`);
  };

  latInput.oninput = resetMap;
  lngInput.oninput = resetMap;

  const showHideCustText = () => {
    if (displaySrc.value == 'Custom Text') {
      custText.classList.remove('hidden');
    } else {
      custText.classList.add('hidden');
    }
  };

  displaySrc.onchange = showHideCustText;
  showHideCustText();

